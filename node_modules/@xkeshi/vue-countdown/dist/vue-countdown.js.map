{"version":3,"file":"vue-countdown.js","sources":["../src/index.js"],"sourcesContent":["const MILLISECONDS_SECOND = 1000;\nconst MILLISECONDS_MINUTE = 60 * MILLISECONDS_SECOND;\nconst MILLISECONDS_HOUR = 60 * MILLISECONDS_MINUTE;\nconst MILLISECONDS_DAY = 24 * MILLISECONDS_HOUR;\n\nexport default {\n  data() {\n    return {\n      /**\n       * Total number of time (in milliseconds) for the countdown.\n       * @type {number}\n       */\n      count: 0,\n\n      /**\n       * Define if the time is countdowning.\n       * @type {boolean}\n       */\n      counting: false,\n\n      /**\n       * The absolute end time.\n       * @type {number}\n       */\n      endTime: 0,\n    };\n  },\n\n  props: {\n    /**\n     * Start to countdown automatically when initialized.\n     */\n    autoStart: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Indicate if emit the countdown events or not.\n     */\n    emitEvents: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Update interval time (in milliseconds) of the countdown.\n     */\n    interval: {\n      type: Number,\n      default: 1000,\n    },\n\n    /**\n     * Add a leading zero to the output numbers if they are less than 10.\n     */\n    leadingZero: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Generate the current time of a specific time zone.\n     */\n    now: {\n      type: Function,\n      default: () => Date.now(),\n    },\n\n    /**\n     * Total number of time (in milliseconds) for the countdown.\n     */\n    time: {\n      type: Number,\n      default: 0,\n      required: true,\n      validator: value => value >= 0,\n    },\n\n    /**\n     * The tag of the component root element in the countdown.\n     */\n    tag: {\n      type: String,\n      default: 'span',\n    },\n  },\n\n  computed: {\n    /**\n     * Remaining days.\n     * @returns {number}\n     */\n    days() {\n      return Math.floor(this.count / MILLISECONDS_DAY);\n    },\n\n    /**\n     * Remaining hours.\n     * @returns {number}\n     */\n    hours() {\n      return Math.floor((this.count % MILLISECONDS_DAY) / MILLISECONDS_HOUR);\n    },\n\n    /**\n     * Remaining minutes.\n     * @returns {number}\n     */\n    minutes() {\n      return Math.floor((this.count % MILLISECONDS_HOUR) / MILLISECONDS_MINUTE);\n    },\n\n    /**\n     * Remaining seconds.\n     * @returns {number}\n     */\n    seconds() {\n      const { interval } = this;\n      const seconds = (this.count % MILLISECONDS_MINUTE) / MILLISECONDS_SECOND;\n\n      if (interval < 10) {\n        return seconds.toFixed(3);\n      } else if (interval >= 10 && interval < 100) {\n        return seconds.toFixed(2);\n      } else if (interval >= 100 && interval < 1000) {\n        return seconds.toFixed(1);\n      }\n\n      return Math.floor(seconds);\n    },\n\n    /**\n     * Total remaining days.\n     * @returns {number}\n     */\n    totalDays() {\n      return this.days;\n    },\n\n    /**\n     * Total remaining hours.\n     * @returns {number}\n     */\n    totalHours() {\n      return Math.floor(this.count / MILLISECONDS_HOUR);\n    },\n\n    /**\n     * Total remaining minutes.\n     * @returns {number}\n     */\n    totalMinutes() {\n      return Math.floor(this.count / MILLISECONDS_MINUTE);\n    },\n\n    /**\n     * Total remaining seconds.\n     * @returns {number}\n     */\n    totalSeconds() {\n      return Math.floor(this.count / MILLISECONDS_SECOND);\n    },\n  },\n\n  render(createElement) {\n    const preprocess = value => (this.leadingZero && value < 10 ? `0${value}` : value);\n\n    return createElement(this.tag, this.$scopedSlots.default ? [\n      this.$scopedSlots.default({\n        days: preprocess(this.days),\n        hours: preprocess(this.hours),\n        minutes: preprocess(this.minutes),\n        seconds: preprocess(this.seconds),\n        totalDays: this.totalDays,\n        totalHours: this.totalHours,\n        totalMinutes: this.totalMinutes,\n        totalSeconds: this.totalSeconds,\n      }),\n    ] : this.$slots.default);\n  },\n\n  created() {\n    this.init();\n  },\n\n  mounted() {\n    if (this.autoStart) {\n      this.start();\n    }\n\n    window.addEventListener('focus', (this.onFocus = this.update.bind(this)));\n  },\n\n  beforeDestroy() {\n    window.removeEventListener('focus', this.onFocus);\n    clearTimeout(this.timeout);\n  },\n\n  watch: {\n    time() {\n      this.init();\n    },\n  },\n\n  methods: {\n    /**\n     * Initialize count.\n     */\n    init() {\n      const { time } = this;\n\n      if (time > 0) {\n        this.count = time;\n        this.endTime = this.now() + time;\n      }\n    },\n\n    /**\n     * Start to countdown.\n     * @public\n     * @emits Countdown#countdownstart\n     */\n    start() {\n      if (this.counting) {\n        return;\n      }\n\n      if (this.emitEvents) {\n        /**\n         * Countdown start event.\n         * @event Countdown#countdownstart\n         */\n        this.$emit('countdownstart');\n      }\n\n      this.counting = true;\n      this.step();\n    },\n\n    /**\n     * Step to countdown.\n     * @private\n     * @emits Countdown#countdownprogress\n     */\n    step() {\n      if (!this.counting) {\n        return;\n      }\n\n      if (this.emitEvents) {\n        /**\n         * Countdown progress event.\n         * @event Countdown#countdownprogress\n         */\n        this.$emit('countdownprogress', {\n          days: this.days,\n          hours: this.hours,\n          minutes: this.minutes,\n          seconds: this.seconds,\n        });\n      }\n\n      if (this.count > 0) {\n        const { interval } = this;\n\n        this.timeout = setTimeout(() => {\n          this.count -= interval;\n          this.step();\n        }, interval);\n      } else {\n        this.count = 0;\n        this.stop();\n      }\n    },\n\n    /**\n     * Stop the countdown.\n     * @public\n     * @emits Countdown#countdownend\n     */\n    stop() {\n      this.counting = false;\n      this.timeout = undefined;\n\n      if (this.emitEvents) {\n        /**\n         * Countdown end event.\n         * @event Countdown#countdownend\n         */\n        this.$emit('countdownend');\n      }\n    },\n\n    /**\n     * Update the count.\n     * @private\n     */\n    update() {\n      if (this.counting) {\n        this.count = Math.max(0, this.endTime - this.now());\n      }\n    },\n  },\n};\n"],"names":["MILLISECONDS_SECOND","MILLISECONDS_MINUTE","MILLISECONDS_HOUR","MILLISECONDS_DAY","Boolean","Number","Function","Date","now","value","String","Math","floor","count","interval","seconds","toFixed","days","createElement","preprocess","leadingZero","tag","$scopedSlots","default","hours","minutes","totalDays","totalHours","totalMinutes","totalSeconds","$slots","init","autoStart","start","addEventListener","onFocus","update","bind","removeEventListener","timeout","time","endTime","counting","emitEvents","$emit","step","setTimeout","stop","undefined","max"],"mappings":"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"}