'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = require('fs');
var fs__default = _interopDefault(fs);
var path = require('path');

'use strict';



/*
 * Parses a string or buffer into an object
 * @param {String|Buffer} src - source to be parsed
 * @returns {Object}
*/
function parse (src) {
  var obj = {};

  // convert Buffers before splitting into lines and processing
  src.toString().split('\n').forEach(function (line) {
    // matching "KEY' and 'VAL' in 'KEY=VAL'
    var keyValueArr = line.match(/^\s*([\w\.\-]+)\s*=\s*(.*)?\s*$/);
    // matched?
    if (keyValueArr != null) {
      var key = keyValueArr[1];

      // default undefined or missing values to empty string
      var value = keyValueArr[2] ? keyValueArr[2] : '';

      // expand newlines in quoted values
      var len = value ? value.length : 0;
      if (len > 0 && value.charAt(0) === '"' && value.charAt(len - 1) === '"') {
        value = value.replace(/\\n/gm, '\n');
      }

      // remove any surrounding quotes and extra spaces
      value = value.replace(/(^['"]|['"]$)/g, '').trim();

      obj[key] = value;
    }
  });

  return obj
}

var parse_1 = parse;

function DotEnvModule(moduleOptions) {
  var _this = this;

  var defaultOptions = {
    only: [],
    path: this.options.srcDir
  };

  var options = Object.assign({}, defaultOptions, moduleOptions);

  var envFilePath = path.join(options.path, '/.env');
  var envConfig = parse_1(fs.readFileSync(envFilePath));

  var isAllowed = function isAllowed(key) {
    return options.only.length === 0 || options.only.indexOf(key) !== -1;
  };

  Object.keys(envConfig).forEach(function (key) {
    if (isAllowed(key)) {
      _this.options.env[key] = _this.options.env[key] || envConfig[key];
    }
  });
}

module.exports = DotEnvModule;
